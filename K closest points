class MaxHeap:
    def __init__(self):
        self.heap = []
    
    def push(self, item):
        self.heap.append(item)
        self._heapify_up(len(self.heap) - 1)
    
    def pop(self):
        if not self.heap:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        root = self.heap[0]
        self.heap[0] = self.heap.pop()
        self._heapify_down(0)
        return root
    
    def _heapify_up(self, index):
        parent = (index - 1) // 2
        if index > 0 and self.heap[index][0] > self.heap[parent][0]:
            self.heap[index], self.heap[parent] = self.heap[parent], self.heap[index]
            self._heapify_up(parent)
    
    def _heapify_down(self, index):
        largest = index
        left = 2 * index + 1
        right = 2 * index + 2
        
        if left < len(self.heap) and self.heap[left][0] > self.heap[largest][0]:
            largest = left
        if right < len(self.heap) and self.heap[right][0] > self.heap[largest][0]:
            largest = right
        if largest != index:
            self.heap[index], self.heap[largest] = self.heap[largest], self.heap[index]
            self._heapify_down(largest)
    
    def __len__(self):
        return len(self.heap)
def k_closest_points(points, k):
    def euclidean_distance_squared(point):
        return point[0] ** 2 + point[1] ** 2
    max_heap = MaxHeap()
    for point in points:
        distance = euclidean_distance_squared(point)
        if len(max_heap) < k:
            max_heap.push((distance, point))
        else:
            if distance < max_heap.heap[0][0]:
                max_heap.pop()
                max_heap.push((distance, point))
    
    return [point for _, point in max_heap.heap]
points = [[1, 3], [-2, 2], [5, 8], [0, 1]]
k = 2
print(k_closest_points(points, k)) 
