def is_hamiltonian_cycle(graph, path, pos, visited):
    if pos == len(graph):
        return graph[path[pos - 1]][path[0]] == 1

    for v in range(1, len(graph)):
        if graph[path[pos - 1]][v] == 1 and not visited[v]:
            path[pos] = v
            visited[v] = True
            if is_hamiltonian_cycle(graph, path, pos + 1, visited):
                return True
            path[pos] = -1
            visited[v] = False

    return False

def has_hamiltonian_cycle(edges, n):
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1

    path = [-1] * n
    visited = [False] * n

    path[0] = 0
    visited[0] = True

    return is_hamiltonian_cycle(graph, path, 1, visited)

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4

print(has_hamiltonian_cycle(edges, n))
